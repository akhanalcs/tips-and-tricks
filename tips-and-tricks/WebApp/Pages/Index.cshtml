@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to Azure PoC Test App</h1>
    <h5>
        This app has demos on Task Scheduling using Azure Functions/ In-App scheduling, AJAX calls to Razor Pages and real time logging notifications pushed by SignalR hub.
    </h5>
</div>

<p>&nbsp;</p>
<hr />

<div>

    <h2>Azure Functions Scheduling</h2>

    <p>I have written an Azure function that can be used to call <a href="/Actions"><strong>Actions </strong></a>page of this app <strong>every single minute</strong>. The CRON schedule for that is: &quot;* * * * *&quot;.</p>

    <p>The logs that are generated by this page call can be inspected from <a href="/Actions"><strong>here</strong></a>.
       The first time you navigate to the Actions page (from your browser) will generate a log which can be cleared by simply clicking <strong><em>Delete All Logs</em></strong> button.
       After that, you can wait for few minutes and click <strong><em>Get Actions Page-Call Logs</em></strong> button to see all the calls made by the Azure function.</p>

    <p><strong>OR</strong> you can simply <em>wait and see</em> the logs being pushed to the console in real-time from <strong>SignalR</strong> hub.</p>

    <p>To view Functions logs, add Application Insights resource to it, as shown <a href="https://docs.microsoft.com/en-us/azure/azure-functions/streaming-logs#built-in-log-streaming">here</a>.</p>
    <p>I believe this can even replace Autosys jobs, so that we can have one single repository for application code and scheduling code (as opposed to managing Autosys jobs and its PowerShell script).</p>

    <p>Note for SignalR deployment: Don't forget to <strong>enable Web sockets</strong> in the App Service as shown below:</p>
    <img src="/images/EnableWebSockets.png" alt="Enable Web sockets in Azure App Service" style="width: 100%;max-height: 100%" />

    <p style="margin-top: 5px;">If you see following JavaScript console error: </p>
    <p>
        <code>
            <strong>
                Error: Failed to start the transport 'WebSockets': Error: WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.
            </strong>
        </code>
    </p>
    <p>and yet SignalR works fine outside company network, the issue is that the company proxy is blocking web sockets, in which case it's best to work with network team to enable websockets in proxy server.
        <a href="https://stackoverflow.com/a/68732723/8644294">Source</a></p>

    <p>&nbsp;</p>
    <hr />

    <h2>In App Scheduling</h2>

    <p>I have added a <strong>Hosted Service</strong> to this Web App that can schedule its jobs in a CRON style schedule. This allows the app to schedule jobs on its own.</p>

    <p>1. An example of this is in the app, where a task is called <strong>every minute</strong> to fetch Quotes. Take a look at it <a href="/Scheduling"><strong>here</strong></a>.</p>

    <p>The CRON schedule for that task is: &quot;* * * * *&quot;.</p>

    <p>The logs that are generated by this method call in the backend can be inspected from <a href="/Actions"><strong>this</strong></a> page. Click <strong><em>Get Scheduling Method-Call Logs</em></strong> button to see them.</p>

    <p>2. Also, there's another task within the app that <strong>runs at every 30th minute</strong> to clear these logs.</p>

    <p>The CRON schedule for that task is: &quot;*/30 * * * *&quot;.</p>

    <p>I believe this can even replace Autosys jobs, so that we have one single repository for application code and scheduling code (as opposed to managing Autosys jobs and its PowerShell script).</p>

    <p>&nbsp;</p>
    <hr />

    <h2>Razor Pages and AJAX calls</h2>

    <p>The <a href="/Actions"><strong>Actions </strong></a> page is a Razor page that makes AJAX calls to another razor page in the backend.</p>

    <p>&nbsp;</p>
    <hr />

    <h2>Deploying this Web App to Azure</h2>

    <p>Deploying Web App to Azure App Service is very simple and straightforward.</p>

    <p>I followed all the instructions from <a href="https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&amp;pivots=development-environment-vs">this</a> Microsoft docs page.</p>

    <p>However I ran into one issue while deploying it that took quite a bit of my time to figure out.</p>

    <p>The error message I was hit with is this:</p>
    <p>
        <code>
            <strong>
                Web Deploy experienced a connection problem with the server and had to terminate the connection. Contact your server administrator if the problem persists. Learn more at: https://go.microsoft.com/fwlink/?LinkId=221672#ERROR_CONNECTION_TERMINATED. Unexpected end of file has occurred. The following elements are not closed: results. Line 1, position 550.
            </strong>
        </code>
    </p>
    <p>The fix to this is to check the 'Run from package file' like this:</p>
    <img src="/images/PublishFinal.png" alt="Final Step of Publish" style="width: 70%;max-height: 70%" />

    <p>&nbsp;</p>
    <hr />

    <h1>Deploying Azure Function to Azure</h1>

    <p>I followed instructions from <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-your-first-function-visual-studio#publish-the-project-to-azure">this</a> Microsoft docs page.</p>

    <p>&nbsp;</p>
    <hr />

    <h1>Azure Resources for Web App and Function</h1>
    <img src="/images/Resources.png" alt="Azure Resources" style="width: 100%;max-height: 100%" />

    <p>&nbsp;</p>
    <hr />

@*  <h1>Code Repository</h1>
    <p>The code repository for this app is <a href="">here</a>.</p>

    <p>&nbsp;</p>
    <hr />*@

    <h1>Thoughts</h1>

    <p>
        Developing in Azure felt very productive. So I think it's a good idea to move applications to Azure.<br />
    </p>

    <p>Also scheduling can be moved to application code, either using Azure Functions or in-app scheduling using hosted service or using a great scheduling library called <a href="https://github.com/HangfireIO/Hangfire">Hangfire</a>.</p>

    <p>
        Azure Functions is a great option for scheduling. One of the best thing about it is that it's essentially free for simple cases like this.<br />
        It uses a &quot;consumption&quot; based model, which means we only get charged when our function is running.<br />
        We get a free quota of 1 million executions a month, so we can go a long way for free as mentioned <a href="https://azure.microsoft.com/en-gb/pricing/details/functions/">here</a>.
    </p>
    <p>I believe a lot more can be done using Azure Functions.</p>

    <p>In next steps, I'll look into containerization.&nbsp;</p>

</div>