@page
@model ActionsModel
@{
    ViewData["Title"] = "AJAX Calls using Razor Pages";
}

<div class="text-center">
    <h1 class="display-4">Azure Functions Scheduling</h1>
    <h5>
        This page is called by Azure Functions every minute which can be seen from Type 1 logs OR simply waiting and seeing the logs appearing in the console that are pushed by SignalR hub.
    </h5>
</div>

<p>&nbsp;</p>
<hr />

<div>
    <h2>View Logs using AJAX Calls</h2>
</div>

<p>&nbsp;</p>

<style>
    #console-div {
        background-color: black;
    }

    #log {
        list-style: none;
        padding: 0;
    }

        #log span.dateTm {
            padding-right: 0.5rem;
            font-size: small;
            color: white;
        }

        #log span.seqNum {
            margin-right: 0.5rem;
            font-weight: bold;
            color: yellow;
        }

        #log span.ok {
            color: rgb(0, 191, 255);
        }

        #log span.fail {
            color: red;
        }

        #log li {
            line-height: 1.125;
            margin-bottom: 1rem;
        }

    .card-body a {
        margin-bottom: 0.5rem;
    }
</style>

<div id="my-row" class="row my-row-actions" style="display: flex;">
    <div class="col-md-6 mt-6" style="display: grid;">
        <div class="card">
            <div class="card-header">Type 1 Actions</div>
            <div class="card-body">
                <button id="actions-page-logs-get-button" class="btn btn-primary mt-2">Get Actions Page-Call Logs</button>
                @*<div class="row">
                        <div class="col-12">
                            <p class="font-weight-bold font-italic mb-2">Text Input</p>
                            <div class="input-group">
                                <input id="action1Input" type="text" class="form-control mb-1"
                                       style="max-width: 20rem;" placeholder="Action 1 Input" />
                            </div>
                            <div class="form-check mb-2">
                                <input id="action1CheckBox" class="form-check-input" type="checkbox" />
                                <label class="form-check-label" for="action1CheckBox">Some CheckBox</label>
                            </div>
                        </div>
                    </div>*@
            </div>
        </div>
        <div class="card">
            <div class="card-header">Type 2 Actions</div>
            <div class="card-body">
                <button id="scheduling-method-logs-get-button" class="btn btn-primary mt-2">Get Scheduling Method-Call Logs</button>
                @*<a asp-page="./Privacy" asp-route-id="" id="subAction1Button" class="btn btn-primary"><i class="fa fa-edit"></i>Subaction 1 Button</a>
                    <div class="row">
                        <div class="col-12">
                            <p class="font-weight-bold font-italic mb-2">Text Input</p>
                            <div class="input-group" style="align-items: center;">
                                <input id="getAllInfoOfALoadInput" type="text" class="form-control mr-3" placeholder="Type 1 Sub action Input" />

                                <label class="mr-3 font-weight-bold">DropDown Input:</label>
                                <select id="subAction1Dropdown" class="form-control mr-3">
                                    <option id="1" value="Yo" selected>Yo</option>
                                    <option id="2" value="Yoo">Yoo</option>
                                </select>
                            </div>
                        </div>
                    </div>*@
            </div>
        </div>
    </div>
    <div class="col-md-6 mt-6">
        <div class="card" style="height: 100%;">
            <div class="card-header">Type 3 Actions</div>
            <div class="card-body">
                <button id="all-logs-delete-button" class="btn btn-primary mt-2">Delete All Logs</button>
            </div>
        </div>
    </div>
</div>

<div class="row my-row-actions">
    <div class="col-md-12 mt-4 mb-3">
        <div class="card">
            <div class="card-header">
                Actions Result
                <button id="console-clear-btn" class="btn-sm btn-secondary float-right ml-2">Clear</button>
            </div>
            <div id="console-div" class="card-body">
                <ul id="log"></ul>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        'use strict';
        var seqNum = 1;

        $(document).ready(function () {
            //Registering click handlers after jQuery loads
            $('.my-row-actions').on('click', 'button', function (event) {
                event.preventDefault();

                if (this.id == 'console-clear-btn') {
                    logClear();
                    return;
                }

                var url = "";
                if (this.id == 'actions-page-logs-get-button') {
                    url += './AJAXPages/ServiceCallResult?actionFlag=getActionsPageLogs';
                }
                else if (this.id == 'scheduling-method-logs-get-button') {
                    url += './AJAXPages/ServiceCallResult?actionFlag=getSchedulingMethodLogs';
                }
                else if (this.id == 'all-logs-delete-button') {
                    url += './AJAXPages/ServiceCallResult?actionFlag=deleteAllLogs';
                }
                urlGet(url);
            });
        });

        /* --- Methods that can simpy load on Page load but not necessarily execute. --- */
        function logClear() 
        { 
            console.log('Log console clear method called.');
            $('#log').html(''); 
        }

        function logMsg(msg, seqNum, success) {
            if (isUndef(seqNum)) seqNum = 0;
            var date = new Date();
            var dateTm = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            $('#log').prepend('<li><span class="seqNum">' + seqNum +
                '&gt;</span><span class="dateTm">' + dateTm
                + ':</span><span class="' + (success ? 'ok' : 'fail') + '">' + msg
                + '</span></li > ');
        }

        function isUndef(val) {
            return typeof val === 'undefined';
        }

        function isEmpty(array) {
            return array === undefined || array.length == 0;
        }

        function isStringNullOrEmpty(myString) {
            return !myString;
        }

        /* --- Get Method --- */
        function urlGet(url) {
            var dateStart = new Date();
            var localSeqNum = seqNum++;
            var msg, ok;

            logMsg('GET ' + url, localSeqNum, true);

            $.ajax({
                url: url,
                type: 'GET',
                //data: {
                //    param1: "param1val"
                //},
                //dataType: 'JSON',
                success: function (data) {
                    if (isUndef(data)) {
                        ok = false;
                        msg = 'Return data was undefined';
                    }
                    else {
                        ok = data.success;
                        msg = '';
                        if (!isEmpty(data.log)) {
                            msg += 'Logs:' + '<br/>' + data.log.join('<br/>') + '<br/>';
                        }
                        else {
                            msg += 'No logs available.' + '<br/>';
                        }
                        msg += 'Duration: ' + (new Date() - dateStart).toLocaleString() + ' ms';
                    }
                    logMsg(msg, localSeqNum, ok);
                },
                error: function (request, error) {
                    msg = 'Error received for request:' + JSON.stringify(request) + '<br/>';
                    msg += 'Error is:' + error + '<br/>';
                    logMsg(msg, localSeqNum, false);
                }
            });
        }
    </script>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    @*Registering SignalR methods after SignalR loads*@
    <script src="~/js/logs.js"></script>
}